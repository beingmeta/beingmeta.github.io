<?fdxml load="common.fdx"?>
<html>
<head>
<title>FramerD</title>
<link rel=stylesheet type="text/css" href="/css/beingmeta.css">
</head>
<body class="ivorybg">
<l1heading title="FramerD">
is a free-form distributed object database which forms the
basis of being<span
class="bmm">m</span><span class='bme'>e</span><span
class='bmt'>t</span><span class='bma'>a</span>'s semantically enabled services and applications.
</l1heading>

<p class="news"><span class='new'>NEW!</span>being<span
class="bmm">m</span><span class='bme'>e</span><span
class='bmt'>t</span><span class='bma'>a</span> recently released
<em>version 2.6</em> of the Framer<sub class='fdd'>D</sub> database,
including numerous refinements and improvements, under both the GNU
GPL and LGPL open-source licenses.<br/> [<a
href='news/framerd26.fdxml' target='_new'>announcement</a>] [<a
href='#downloads'>download</a>] [<a href='#releasenotes'>release
notes</a>] [<a href='http://www.framerd.org/' target='_new'>homepage</a>]</p>

<p class='first'>Framer<span class='fdd'>D</sub> is a free-form
distributed object database supporting millions of objects and
optimized for pointer-intensive structures and operations.  FramerD
includes a variety of inference procedures and a scripting language
based on R4RS scheme with special extensions for *non-determinstic
programming* and sophisticated text and document handling.  FramerD
comes with a high performance Apache-based servlet architecture which
allows responsive web-based applications and template based scripting
through interpreted FDXML files.</p>

<p>Conventional databases based on relational algebra (any
SQL-oriented product) are not optimized for pointer-intensive data and
poorly support knowledge-based algorithms which make heavy use of
pointer-following and queries with complex internal dependencies.
FramerD uses an alternate model supporting billions of unique objects
with lightweight pointers and a range of caching strategies for
resolving object pointers to complex structured objects.  This model
is incorporated with the ability to manage very large dynamically
modifiable indices that map arbitrary structured objects to
collections of object references.</p>

<p>Framer<sub class='fdd'>D</sub> was originally implemented by
Dr. Haase at the MIT Media Laboratory over a decade ago, and has
constituted a stable and evolving platform for a range of applications
at MIT and elsewhere.  being<span class="bmm">m</span><span
class='bme'>e</span><span class='bmt'>t</span><span
class='bma'>a</span> has continued the development the open-source
FramerD platform, focusing on robustness, performance improvements,
platform portability, and the FDXML/fdservlet architecture for
knowledge-based web applications.  The company has also focused on
making FramerD able to take advantage of modern SMP hardware.
Internally, the company is actively developing entirely new versions
of Framer<sub class='fdd'>D</sub> for both mobile embedded platforms
and high performance hardware.</p>

<p>Framer<sub class='fdd'>D</span> has an associated scripting
language, called FDScript, that started as a simple way of specifying
inference algorithms but eventually grew into a complete
implementation of the Scheme programming language with special
provisions for writing non-deterministic programs.  These provisions
incorporate search processes into the programming language itself,
allowing a procedure or database access to return multiple alternative
values and to have the language automatically explore the various
alternatives independently.  For language aficionados, this can be
thought of bringing <em>"Prolog-style programming"</em> to a
traditional applicative language.  In addition, FDScript was extended
with rich tools for pattern analyzing textual documents and for
connecting to a range of Internet services.</p>

<hr/>

<dl class="toplevel">
<dt id='downloads'>Framer<sub class='fdd'>D</sub> 2.6
    can be downloaded from <a http://www.sourceforge.net">Sourceforge</a> (
    <a href="http://www.sourceforge.net/">www.sourceforge.net</a>)
</dt>
<dd>
<table class="chart" width="80%">
<thead></thead><tfoot></tfoot>
<tbody align="center" valign="top">
<tr><th class='nw'>
    Kind:</th>
    <th class='n' >File:</th>
    <th class='ne'> URL:
   </th></tr>

<tr><th class="w">[Source]</th>
    <th class="center">
framerd-2.6.1.tar.gz
    </th>
    <th class="e">  <a href="http://prdownloads.sourceforge.net/framerd/framerd-2.6.1.tar.gz?download">	
        http://prdownloads.sourceforge.net/framerd/framerd-2.6.1.tar.gz?download</a></th></tr>
<tr><th class="w">[WIN32]	</th>
    <th class="center">
fdinstall261.exe	
    </th>
    <th class="e">  
         <a href="http://prdownloads.sourceforge.net/framerd/fdinstall261.exe?download">	 
     http://prdownloads.sourceforge.net/framerd/fdinstall261.exe?download
         </a>
    </th></tr>
    <tr><th class="w"> [OS X]	</th>
    <th class="center">
	FramerD.dmg	
    </th>
    <th class="e">  
         <a href="http://prdownloads.sourceforge.net/framerd/FramerD.dmg?download">	
         http://prdownloads.sourceforge.net/framerd/FramerD.dmg?download
              </a>
    </th></tr>
        <tr><th class="w"> [x386 RPM]	 </th>
    <th class="center">
framerd-2.6.1-1	.i386.rpm 
    </th>
    <th class="e">  
          <a http://prdownloads.sourceforge.net/framerd/framerd-2.6.1-1.i386.rpm?download">             
                  http://prdownloads.sourceforge.net/framerd/framerd-2.6.1-1.i386.rpm?download
                          </a>
    </th></tr>
            <tr><th class="w"> [Source RPM]			 </th>
    <th class="center">
framerd-2.6.1-1.src.rpm
    </th>
    <th class="e">  
 <a href="http://prdownloads.sourceforge.net/framerd/framerd-2.6.1-1.i386.rpm?download">	
                 http://prdownloads.sourceforge.net/framerd/framerd-2.6.1-1.i386.rpm?download
    </a>
    
    </th></tr>
<tr><th class="w">   [x386 DEB]		 	 </th>
    <th class="center">
[framerd_2.6.1-3	_i386.deb 
    </th>
    <th class="e">  

     <a href="http://prdownloads.sourceforge.net/framerd/framerd-2.6.1-1.i386.rpm?download">	    
    http://prdownloads.sourceforge.net/framerd/framerd-2.6.1-1.i386.rpm?download
          </a>  
    </th></tr>
</tbody>
</table>

</dd>
<dt id='releasenotes'>Framer<sub class='fdd'>D</sub> 2.6
includes various bug fixes and expanded error handling but
significantly adds: 
</dt>
<dd>
<ul>
<li>New kinds of file indices which scale effectively to multi-million
       key tables </li>
    <li>General improvements to FDSCRIPT module system</li>
    <li>Defined more core primitive inference procedures especially around structured (assoc/pair) slots</li>
    <li>Added generic facility for file/module reloading</li>
    <li>Various frame operation  optimizations</li>
    <li>Added new primitives for accessing serial ports (including USB serial ports)</li>
    <li>Numerous fixes and additions to arithmetic functions in FDScript</li>
    <li>Improvements to index caching performance</li>
    <li>Added compound indices which combine multiple indices with a shared cache.</li>
    <li>Added subservers on index servers, allowing a single server to provide several distinct index tables</li>
    <li>Provided C API access to ints and strings in config files</li>
    <li>New, simpler command line parsing API</li>
    <li>Use long longs as OIDs if possible</li>
    <li>Added support for largefiles (> 2GB) for pools and indices</li>
    <li>Added synchronization for pools and indices</li>
    <li>Use file memory mapping for file pools and indices for dramatically improved performance in many cases
    <li>Further optimiziations to choice/set handling</li>
    <li>Added "schema slotmaps" to reduce memory footprint for homogenous databases</li>
    <li>Extensions to support extensive malloc debugging</li>
    <li>Introduced interned ZSTRINGS as a core data type</li>
    <li>Extended the frame data model by adding *adjuncts* which allow index mappings to specify particular slots of for particular pools.</li>
    <li>Separated out get-methods and compute-methods</li>
    <li>Different pools and indices on the same server now get their own network connection to reduce thread contention</li>
    <li>Added finer grained locks for pool and index access to improve SMP performance.</li>
    <li>Optimized index retrieval to return sorted choices</li>
    <li>Added tools to manage malformed UTF-8 text (important for DMOZ integration)</li>
    <li>Improved ability to preload indices to improve performance</li>
    <li>Fixes to HTML/XML integration with special attention to XML</li>
    <li>Fix mime parsing with BASE64 encoding</li>
    <li>Added tools for parsing structured (tab, space, etc) plaintext</li>
    <li>Separated out the FDTEXT and FDWWW libraries</li>
    <li>Made FDXML actually be usable and added callout models to have
    FDXML call Scheme to generate content.</li>
</ul>
</dd>

</div>
</dl>

</div>
    <div class='siteInfo'>
 Copyright &copy; 2003-2005 beingmeta, inc.<br/>
 <a href='/'>beingmeta</a>&nbsp;
 <a href='/technology.fdxml>Technology</a>&nbsp;
 <a href='/team.fdxml>Team</a>&nbsp;
<a href='/credo.fdxml>Credo</a>&nbsp;
 <a href='/about.fdxml>About</a>&nbsp;     
 <a href='/news'>News</a>&nbsp;
<a href='/docs'>Publications</a>&nbsp;
</div>

</body>


</html>




